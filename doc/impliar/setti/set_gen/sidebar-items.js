window.SIDEBAR_ITEMS = {"fn":[["fcollect","collects all combinational sets of size k starting with s[r] in the subvector s[r+1:]"],["fcollect_vec","vector version of `fcollect`; collects all subvectors of size k starting with s[r] in the subvector s[r+1:]"],["greedy_decision","decides a k-vector for an n x k SelectionRule by the greedy approach: first available element (top to bottom) at each column (left to right). "],["identity_k_vector_map","outputs the vector map for restriction|requirement"],["identity_vector","outputs a k-vector with all elements equal to `v`. "],["ordered_vec_by_reference","orders the vector `v2` by the vector `reference`; for remaining elements of `v2` not in `reference, method orders them according to `strng_srt::sort_inc1string_vector`. "],["selection_rule_sample_1","sample SelectionRule; unused.  restriction and requirement is all"],["selection_rule_sample_2","sample SelectionRule; unused.  requirement is all, restriction is none"],["selection_rule_sample_3","sample SelectionRule; unused. "],["sr_op","determines the first available choice in selection rule at column index"],["valid_index_limit","method used for determining validity of index for `fcollect` methods"]],"macro":[["Eq","Derive macro generating an impl of the trait `Eq`."],["Hash","Derive macro generating an impl of the trait `Hash`."]],"struct":[["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["HashSet","A hash set implemented as a `HashMap` where the value is `()`."],["SGen","SGen is short for set-generator; generates k-sets from choice vector `value`. "]],"trait":[["Borrow","A trait for borrowing data."],["Eq","Trait for equality comparisons which are equivalence relations."],["Hash","A hashable type."]]};